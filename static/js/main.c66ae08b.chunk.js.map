{"version":3,"sources":["logo.svg","serviceWorker.js","contexts/firebase/firebaseContext.js","contexts/firebase/firebase.js","contexts/firebase/index.js","components/firebase/addCup.js","components/statistics/dateParser.js","components/statistics/Graph.js","contexts/statistics/coffeeDataContext.js","contexts/statistics/index.js","contexts/statistics/coffeeData.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","FirebaseContext","React","createContext","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","props","console","log","firebase","initializeApp","state","Component","AddCup","getDate","today","Date","String","padStart","getMonth","getFullYear","getTime","getHours","getMinutes","sendToDb","database","ref","push","set","newCoffee","type","time","date","JSON","stringify","defaultCoffee","then","res","catch","err","Consumer","firebaseContainer","className","onClick","period","Graph","useEffect","dayjs","extend","require","xType","width","height","title","data","length","rawData","timePeriod","lastSeen","hour","minute","timestamp","valueOf","nCups","parsedData","cDate","forEach","element","addEntry","dayOfYear","week","month","year","warn","x","y","diff","parseToGraphData","curve","CoffeeDataContext","CoffeeData","once","childNode","val","App","context","useContext","useState","setData","src","logo","alt","ReactDOM","render","Provider","value","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c66ae08b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport default FirebaseContext;","import firebase from 'firebase/app';\nimport 'firebase/auth'\nimport 'firebase/database'\nimport 'firebase/firestore'\nimport 'firebase/performance'\nimport {Component} from \"react\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\nclass Firebase extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"init Firebase\");\n    firebase.initializeApp(firebaseConfig);\n    this.state = {\n      firebase: firebase\n    };\n  };\n}\n\nexport default Firebase;","import FirebaseContext from './firebaseContext';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext };","import React from 'react';\n\nimport { FirebaseContext } from '../../contexts/firebase';\n\nconst AddCup = () => {\n  const userID = 'userID';\n  // const [coffee, setCoffee, getCoffee] = useState({\n  //   type: 'fuck',\n  //   time: \"06:09\",\n  //   date: \"04/20/1969\"\n  // });\n\n  const getDate = () => {\n    let today = new Date();\n    let dd = String(today.getDate()).padStart(2, '0');\n    let mm = String(today.getMonth() + 1).padStart(2, '0');\n    let yyyy = today.getFullYear();\n    return dd + '/' + mm + '/' + yyyy;\n  };\n\n  const getTime = () => {\n    let today = new Date();\n    let th = String(today.getHours()).padStart(2, '0');\n    let tm = String(today.getMinutes()).padStart(2, '0');\n    return th + \":\" + tm;\n  };\n\n  const defaultCoffee = () => {\n    let newCoffee = {\n      type: 'black',\n      time: getTime(),\n      date: getDate()\n    };\n    console.log(\"coffee = \" + JSON.stringify(newCoffee, null, \" \"));\n    // setCoffee(newCoffee);\n    return newCoffee;\n  };\n\n  const sendToDb = (firebase) => {\n    console.log(\"trying to add the coffee\");\n\n    firebase.database().ref('Coffee/Users/' + userID + '/Entries')\n    .push()\n    .set(defaultCoffee())\n    .then(res => {\n      console.log(\"success\");\n    }).catch(err => {\n      console.log(\"Could not add coffee to firebase:\\n\" + err);\n    });\n  };\n\n  return (\n    <FirebaseContext.Consumer>\n      {firebaseContainer => {\n        // console.log(\"currentUser: \" + firebaseContainer.state.firebase.auth().currentUser);\n        return <button className={\"addCoffee\"} onClick={() => sendToDb(firebaseContainer.state.firebase)}>AddCup</button>;\n      }}\n    </FirebaseContext.Consumer>\n  );\n};\n\nexport default AddCup;","\nimport dayjs from 'dayjs';\n\nconst period = {\n    DAILY: 'daily',\n    WEEKLY: 'weekly',\n    MONTHLY: 'monthly',\n    YEARLY: 'yearly'\n}\n\nexport const parseToGraphData = (rawData, timePeriod=period.DAILY) => {\n    let lastSeen = dayjs(rawData[0].date + \" \" + rawData[0].time, 'DD/MM/YYYY HH:mm').hour(0).minute(0); //first day\n    let timestamp = lastSeen.valueOf(); // milliseconds since the Unix Epoch\n    let nCups = 0;\n    let time = 0;\n    let parsedData = [];\n    let cDate = null; // current date\n    rawData.forEach(element => {\n      cDate = dayjs(element.date + \" \" + element.time, 'DD/MM/YYYY HH:mm');\n\n      // check if we should add the new element based on the selected time period\n      let addEntry = false;\n      switch (timePeriod) {\n        case period.DAILY: \n            if (cDate.dayOfYear() !== lastSeen.dayOfYear()) {\n                addEntry = true;\n            } break;\n        case period.WEEKLY: \n            if (cDate.week() !== lastSeen.week()) {\n                addEntry = true;\n            } break;\n        case period.MONTHLY: \n            if (cDate.month() !== lastSeen.month()) {\n                addEntry = true;\n            } break;\n        case period.YEARLY:\n            if (cDate.year() !== lastSeen.year()) {\n                addEntry = true;\n            } break;\n        default:\n            console.warn(\"Time period did not match with any available options\");\n      }\n\n      if (addEntry) {\n          addEntry = false;\n          parsedData.push({\n            x: timestamp + time,\n            y: nCups\n          });\n          nCups = 1;\n          time += cDate.diff(lastSeen, 'millisecond');\n      } else {\n          nCups++;\n      }\n      lastSeen = cDate; // remember last seen\n    });\n    // add last entry\n    time += cDate.diff(lastSeen, 'millisecond');\n    parsedData.push({\n      x: timestamp + time,\n      y: nCups\n    });\n    console.log(parsedData)\n    return parsedData;\n};\n\n","import React, {useEffect} from 'react';\nimport \"../../../node_modules/react-vis/dist/style.css\";\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  AreaSeries\n} from 'react-vis';\nimport dayjs from 'dayjs';\nimport {parseToGraphData} from './dateParser';\n\n\nconst Graph = (props) => {\n  //const [data, setData] = useState([]);\n\n  useEffect(() => {\n    dayjs.extend(require('dayjs/plugin/customParseFormat'));\n    dayjs.extend(require('dayjs/plugin/dayOfYear'));\n    dayjs.extend(require('dayjs/plugin/weekOfYear'));\n  });\n\n  const stupidCalculating = () => {\n    //setData(props.data);\n    console.log(\"calculating...\");\n    if (props.data.length === 0) {\n      return [];\n    }\n    console.log(props.data);\n\n    let parsedData = parseToGraphData(props.data);\n\n    return parsedData;\n  }\n\n  return (\n    <XYPlot xType=\"time\" width={600} height={300}>\n      <HorizontalGridLines />\n      <VerticalGridLines />\n      <XAxis title=\"date\" />\n      <YAxis title=\"cups\" />\n      <AreaSeries data={stupidCalculating()} curve={'curveMonotoneX'} />\n    </XYPlot>\n  );\n}\nexport default Graph;\n","import React from 'react';\n\nconst CoffeeDataContext = React.createContext({\n  data: {\n    type: \"default\",\n    time: \"06:09\",\n    date: \"04/20/1969\"\n  }\n});\n\nexport default CoffeeDataContext;","import CoffeeDataContext from './coffeeDataContext';\nimport CoffeeData from './coffeeData';\n\nexport default CoffeeData;\n\nexport { CoffeeDataContext };","const CoffeeData = (firebase) => {\n  const userID = 'userID';\n  let state = []\n\n    console.log(\"fetching all cups\");\n\n    return firebase.state.firebase.database().ref(\n        'Coffee/Users/' + userID + '/Entries').once('value').then( res => {\n      res.forEach((childNode) => {\n        state.push({\n          type: childNode.val().type,\n          date: childNode.val().date,\n          time: childNode.val().time\n        })\n      });\n      return state;\n    });\n};\n\nexport default CoffeeData;","import React, {useContext, useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddCup from \"./components/firebase/addCup\";\nimport Graph from \"./components/statistics/Graph\";\nimport {CoffeeDataContext} from \"./contexts/statistics\";\n\nconst App = () => {\n  const context = useContext(CoffeeDataContext);\n  const [data, setData] = useState([]);\n\n  useEffect(()=>{\n    context.then(res => setData(res));\n  });\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className={\"header-text\"}>Register Kaffi</h1>\n      </header>\n        <AddCup/>\n      <Graph data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport Firebase, { FirebaseContext } from './contexts/firebase';\nimport CoffeeData, {CoffeeDataContext} from \"./contexts/statistics\";\n\nconst firebase = new Firebase();\n\nReactDOM.render(\n  <FirebaseContext.Provider value={firebase}>\n    <CoffeeDataContext.Provider value={CoffeeData(firebase)}>\n      <App />\n    </CoffeeDataContext.Provider>\n  </FirebaseContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}